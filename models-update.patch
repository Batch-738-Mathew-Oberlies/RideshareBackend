From e9355552893c948088021b32a1fd6e472d362489 Mon Sep 17 00:00:00 2001
From: Gilbert Turner <grturner@5x5code.com>
Date: Wed, 22 Apr 2020 09:35:30 -0400
Subject: [PATCH] Model Updates: Users & Addresses Created Address model, and
 refactored Users and DistanceServiceImpl to update

Signed-off-by: Gilbert Turner <grturner@5x5code.com>
---
 .../revature/controllers/UserController.java  | 128 +++++++-----------
 .../java/com/revature/models/Address.java     |  33 +++++
 src/main/java/com/revature/models/User.java   | 116 ++++++----------
 .../services/impl/DistanceServiceImpl.java    | 117 ++++------------
 4 files changed, 150 insertions(+), 244 deletions(-)
 create mode 100644 src/main/java/com/revature/models/Address.java

diff --git a/src/main/java/com/revature/controllers/UserController.java b/src/main/java/com/revature/controllers/UserController.java
index 28f41c0..891361f 100644
--- a/src/main/java/com/revature/controllers/UserController.java
+++ b/src/main/java/com/revature/controllers/UserController.java
@@ -1,40 +1,21 @@
 package com.revature.controllers;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import javax.validation.Valid;
-import javax.validation.Validator;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.validation.BindingResult;
-import org.springframework.validation.FieldError;
-import org.springframework.web.bind.annotation.CrossOrigin;
-import org.springframework.web.bind.annotation.DeleteMapping;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.PutMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
-
 import com.google.maps.errors.ApiException;
-import com.revature.Driver;
-import com.revature.models.Batch;
+import com.revature.models.Address;
 import com.revature.models.User;
 import com.revature.services.BatchService;
 import com.revature.services.DistanceService;
 import com.revature.services.UserService;
-
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.validation.BindingResult;
+import org.springframework.validation.FieldError;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.io.IOException;
+import java.util.*;
 
 /**
  * UserController takes care of handling our requests to /users.
@@ -48,21 +29,21 @@
 @RestController
 @RequestMapping("/users")
 @CrossOrigin
-@Api(tags= {"User"})
+@Api(tags = {"User"})
 public class UserController {
-	
+
 	@Autowired
-	private UserService us;
-	
+	private UserService userService;
+
 	@Autowired
-	private BatchService bs;
-	
+	private BatchService batchService;
+
 	@Autowired
-	private DistanceService ds;
-	
+	private DistanceService distanceService;
+
 	/**
 	 * HTTP GET method (/users)
-	 * 
+	 *
 	 * @param isDriver represents if the user is a driver or rider.
 	 * @param username represents the user's username.
 	 * @param location represents the batch's location.
@@ -76,42 +57,25 @@
 		return us.getActiveDrivers();
 	}*/
 	
-	
 	@ApiOperation(value="Returns user drivers", tags= {"User"})
 	@GetMapping("/driver/{address}")
 	public List <User> getTopFiveDrivers(@PathVariable("address")String address) throws ApiException, InterruptedException, IOException {
 		//List<User> aps =  new ArrayList<User>();
 		System.out.println(address);
-		List<String> destinationList = new ArrayList<String>();
-		String [] origins = {address};
-//		
-	    Map<String, User> topfive = new HashMap<String, User>();
-//		
-		for(User d : us.getActiveDrivers()) {
-//			
-			String add = d.getHAddress();
-			String city = d.getHCity();
-			String state = d.getHState();
-			
-			String fullAdd = add + ", " + city + ", " + state;
-			
+		List<String> destinationList = new ArrayList<>();
+		String[] origins = {address};
+		Map<String, User> topfive = new HashMap<>();
+		for (User d : userService.getActiveDrivers()) {
+			Address homeAddress = d.getHAddress();
+			String fullAdd = String.format("%s %s, %s", homeAddress.getStreet(), homeAddress.getCity(), homeAddress.getState());
 			destinationList.add(fullAdd);
-//			
 			topfive.put(fullAdd, d);
-//						
-	}
-//		
-//		System.out.println(destinationList);
-//		
-		String [] destinations = new String[destinationList.size()];
-////		
-	destinations = destinationList.toArray(destinations);
-//		
-	return	ds.distanceMatrix(origins, destinations);
-//		
-//		
-		//return ds.distanceMatrix();	
-		
+		}
+		//System.out.println(destinationList);
+		String[] destinations = new String[destinationList.size()];
+		destinations = destinationList.toArray(destinations);
+		return distanceService.distanceMatrix(origins, destinations);
+		//return ds.distanceMatrix();
 	}
 	
 	/**
@@ -128,16 +92,16 @@
 	public List<User> getUsers(@RequestParam(name="is-driver",required=false)Boolean isDriver,
 							   @RequestParam(name="username",required=false)String username,
 							   @RequestParam(name="location", required=false)String location) {
-		
+
 		if (isDriver != null && location != null) {
-			return us.getUserByRoleAndLocation(isDriver.booleanValue(), location);
+			return userService.getUserByRoleAndLocation(isDriver.booleanValue(), location);
 		} else if (isDriver != null) {
-			return us.getUserByRole(isDriver.booleanValue());
+			return userService.getUserByRole(isDriver.booleanValue());
 		} else if (username != null) {
-			return us.getUserByUsername(username);
+			return userService.getUserByUsername(username);
 		}
-		
-		return us.getUsers();
+
+		return userService.getUsers();
 	}
 	
 	/**
@@ -150,8 +114,8 @@
 	@ApiOperation(value="Returns user by id", tags= {"User"})
 	@GetMapping("/{id}")
 	public User getUserById(@PathVariable("id")int id) {
-		
-		return us.getUserById(id);
+
+		return userService.getUserById(id);
 	}
 	
 	/**
@@ -254,12 +218,12 @@ else if (code.equals("Pattern") && field.equals("phoneNumber")) {
 		    }
 
 			if (errors.isEmpty()) {
-				
-				user.setBatch(bs.getBatchByNumber(user.getBatch().getBatchNumber()));
-		 		us.addUser(user);
-		 		
 
-		 	}
+				user.setBatch(batchService.getBatchByNumber(user.getBatch().getBatchNumber()));
+				userService.addUser(user);
+
+
+			}
 		    return errors;
 		
 	}
@@ -275,7 +239,7 @@ else if (code.equals("Pattern") && field.equals("phoneNumber")) {
 	@PutMapping
 	public User updateUser(@Valid @RequestBody User user) {
 		//System.out.println(user);
-		return us.updateUser(user);
+		return userService.updateUser(user);
 	}
 	
 	/**
@@ -288,8 +252,8 @@ public User updateUser(@Valid @RequestBody User user) {
 	@ApiOperation(value="Deletes user by id", tags= {"User"})
 	@DeleteMapping("/{id}")
 	public String deleteUserById(@PathVariable("id")int id) {
-		
-		return us.deleteUserById(id);
+
+		return userService.deleteUserById(id);
 	}
 	
 	
diff --git a/src/main/java/com/revature/models/Address.java b/src/main/java/com/revature/models/Address.java
new file mode 100644
index 0000000..2bc878d
--- /dev/null
+++ b/src/main/java/com/revature/models/Address.java
@@ -0,0 +1,33 @@
+package com.revature.models;
+
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import javax.validation.constraints.NotEmpty;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "address")
+@Data
+@NoArgsConstructor
+public class Address implements Serializable {
+    private static final long serialVersionUID = 42L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    @Column(name = "address_id")
+    private int id;
+
+    @NotEmpty
+    private String street;
+
+    @NotEmpty
+    private String city;
+
+    @NotEmpty
+    private String state;
+
+    @NotEmpty
+    private String zip;
+}
diff --git a/src/main/java/com/revature/models/User.java b/src/main/java/com/revature/models/User.java
index dd7db84..da31cc7 100644
--- a/src/main/java/com/revature/models/User.java
+++ b/src/main/java/com/revature/models/User.java
@@ -1,33 +1,17 @@
 package com.revature.models;
 
-import java.io.Serializable;
+import lombok.*;
+import org.hibernate.annotations.LazyCollection;
+import org.hibernate.annotations.LazyCollectionOption;
+import org.springframework.stereotype.Component;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
+import javax.persistence.*;
 import javax.validation.Valid;
 import javax.validation.constraints.Email;
 import javax.validation.constraints.NotBlank;
-
 import javax.validation.constraints.Pattern;
 import javax.validation.constraints.Size;
-
-import org.springframework.stereotype.Component;
-
-import com.revature.models.Batch;
-
-import org.springframework.stereotype.Component;
-
-import lombok.EqualsAndHashCode;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-import lombok.ToString;
+import java.io.Serializable;
 
 @Component
 @Entity
@@ -46,6 +30,7 @@
 	@Size(min=3,max=12)
 	@Pattern(regexp="^\\w+\\.?\\w+$")
 	private String userName;
+
 	@ManyToOne
 	@JoinColumn(name="batch_number")
 	private Batch batch;
@@ -63,52 +48,46 @@
 	@Size(max=30)
 	@Pattern(regexp="^[a-zA-Z\\u00C0-\\u017F]+[- ]?[a-zA-Z\\u00C0-\\u017F]+$")
 	private String lastName;
+
 	@NotBlank
 	@Email
-	@Pattern(regexp="^\\w+\\.?\\w+@\\w+\\.[a-zA-Z]{2,4}$")
+	@Pattern(regexp = "^\\w+\\.?\\w+@\\w+\\.[a-zA-Z]{2,4}$")
 	private String email;
+
 	@NotBlank
-	@Column(name="phone_number")
-	@Pattern(regexp="^\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$")
+	@Column(name = "phone_number")
+	@Pattern(regexp = "^\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$")
 	private String phoneNumber;
-	@Column(name="is_driver")
+
+	@Column(name = "is_driver")
 	private boolean isDriver;
-	@Column(name="is_active")
+
+	@Column(name = "is_active")
 	private boolean isActive;
-	@Column(name="is_accepting_rides")
+
+	@Column(name = "is_accepting_rides")
 	private boolean isAcceptingRides;
+
+	@OneToOne(cascade = CascadeType.ALL)
 	@NotBlank
-	@Column(name = "h_address")
-	private String hAddress;
-	@NotBlank
-	@Column(name = "h_city")
-	private String hCity;
-	@NotBlank
-	@Column(name = "h_zip")
-	private String hZip;
-	@NotBlank
-	@Column(name = "h_state")
-	private String hState;
-	@NotBlank
-	@Column(name = "w_address")
-	private String wAddress;
-	@NotBlank
-	@Column(name = "w_city")
-	private String wCity;
-	@NotBlank
-	@Column(name = "w_zip")
-	private String wZip;
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@JoinColumn(name = "h_address")
+	private Address hAddress;
+
+	@OneToOne(cascade = CascadeType.ALL)
 	@NotBlank
-	@Column(name = "w_state")
-	private String wState;
-	
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@JoinColumn(name = "w_address")
+	private Address wAddress;
+
+
 	public User(int userId, @NotBlank @Size(min = 3, max = 12) @Pattern(regexp = "^\\w+\\.?\\w+$") String userName,
-			Batch batch,
-			@NotBlank @Size(max = 30) @Pattern(regexp = "^[a-zA-Z]+-?[a-zA-Z]+ ?[a-zA-Z]+-?[a-zA-Z]+$") String firstName,
-			@NotBlank @Size(max = 30) @Pattern(regexp = "^[a-zA-Z]+-?[a-zA-Z]+ ?[a-zA-Z]+-?[a-zA-Z]+$") String lastName,
-			@Email @Pattern(regexp = "^\\w+\\.?\\w+@\\w+\\.[a-zA-Z]{2,4}$") String email,
-			@NotBlank @Pattern(regexp = "^\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$") String phoneNumber,
-			boolean isDriver, boolean isActive, boolean isAcceptingRides) {
+				Batch batch,
+				@NotBlank @Size(max = 30) @Pattern(regexp = "^[a-zA-Z]+-?[a-zA-Z]+ ?[a-zA-Z]+-?[a-zA-Z]+$") String firstName,
+				@NotBlank @Size(max = 30) @Pattern(regexp = "^[a-zA-Z]+-?[a-zA-Z]+ ?[a-zA-Z]+-?[a-zA-Z]+$") String lastName,
+				@Email @Pattern(regexp = "^\\w+\\.?\\w+@\\w+\\.[a-zA-Z]{2,4}$") String email,
+				@NotBlank @Pattern(regexp = "^\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$") String phoneNumber,
+				boolean isDriver, boolean isActive, boolean isAcceptingRides) {
 		super();
 		this.userId = userId;
 		this.userName = userName;
@@ -155,9 +134,9 @@ public User(int userId, @NotBlank @Size(min = 3, max = 12) @Pattern(regexp = "^\
 		this.email = email;
 		this.phoneNumber = phoneNumber;
 	}
+
 	public User(int userId, @NotBlank String userName, Batch batch, @NotBlank String firstName,
-			@NotBlank String lastName, @Email String email, @NotBlank String phoneNumber, String hAddress, String hCity,
-			String hZip, String hState, String wAddress, String wCity, String wZip, String wState) {
+				@NotBlank String lastName, @Email String email, @NotBlank String phoneNumber, Address hAddress, Address wAddress) {
 		super();
 		this.userId = userId;
 		this.userName = userName;
@@ -167,18 +146,12 @@ public User(int userId, @NotBlank String userName, Batch batch, @NotBlank String
 		this.email = email;
 		this.phoneNumber = phoneNumber;
 		this.hAddress = hAddress;
-		this.hCity = hCity;
-		this.hZip = hZip;
-		this.hState = hState;
 		this.wAddress = wAddress;
-		this.wCity = wCity;
-		this.wZip = wZip;
-		this.wState = wState;
 	}
+
 	public User(int userId, @NotBlank String userName, Batch batch, @NotBlank String firstName,
-			@NotBlank String lastName, @Email String email, @NotBlank String phoneNumber, boolean isDriver,
-			boolean isActive, boolean isAcceptingRides, String hAddress, String hCity, String hZip, String hState,
-			String wAddress, String wCity, String wZip, String wState) {
+				@NotBlank String lastName, @Email String email, @NotBlank String phoneNumber, boolean isDriver,
+				boolean isActive, boolean isAcceptingRides, Address hAddress, Address wAddress) {
 		super();
 		this.userId = userId;
 		this.userName = userName;
@@ -191,12 +164,7 @@ public User(int userId, @NotBlank String userName, Batch batch, @NotBlank String
 		this.isActive = isActive;
 		this.isAcceptingRides = isAcceptingRides;
 		this.hAddress = hAddress;
-		this.hCity = hCity;
-		this.hZip = hZip;
-		this.hState = hState;
 		this.wAddress = wAddress;
-		this.wCity = wCity;
-		this.wZip = wZip;
-		this.wState = wState;
+
 	}
 }
diff --git a/src/main/java/com/revature/services/impl/DistanceServiceImpl.java b/src/main/java/com/revature/services/impl/DistanceServiceImpl.java
index b50cfce..6531f98 100644
--- a/src/main/java/com/revature/services/impl/DistanceServiceImpl.java
+++ b/src/main/java/com/revature/services/impl/DistanceServiceImpl.java
@@ -1,15 +1,5 @@
 package com.revature.services.impl;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
 import com.google.maps.DistanceMatrixApi;
 import com.google.maps.DistanceMatrixApiRequest;
 import com.google.maps.GeoApiContext;
@@ -17,129 +7,80 @@
 import com.google.maps.model.DistanceMatrix;
 import com.google.maps.model.TravelMode;
 import com.google.maps.model.Unit;
+import com.revature.models.Address;
 import com.revature.models.User;
 import com.revature.services.DistanceService;
 import com.revature.services.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+import java.util.*;
 
 @Service
 public class DistanceServiceImpl implements DistanceService {
-	
+
 	@Autowired
 	private UserService us;
 
+	//TODO: REFACTOR THIS
 	@Override
 	public List<User> distanceMatrix(String[] origins, String[] destinations) throws ApiException, InterruptedException, IOException {
-		
-		Map<String, User> userDestMap = new HashMap<String, User>();
-		
-		List<String> destinationList = new ArrayList<String>();
-		
-		for(User d : us.getActiveDrivers()) {
-			
-			String add = d.getHAddress();
-			String city = d.getHCity();
-			String state = d.getHState();
-			
-			String fullAdd = add + ", " + city + ", " + state;
-			
+		Map<String, User> userDestMap = new HashMap<>();
+		List<String> destinationList = new ArrayList<>();
+		for (User d : us.getActiveDrivers()) {
+			Address homeAddress = d.getHAddress();
+			String fullAdd = String.format("%s %s, %s", homeAddress.getStreet(), homeAddress.getCity(), homeAddress.getState());
 			destinationList.add(fullAdd);
-			
 			userDestMap.put(fullAdd, d);
-						
 		}
-		
 		//System.out.println(destinationList);
-		
-		 destinations = new String[destinationList.size()];
-//		
+		destinations = new String[destinationList.size()];
 		destinations = destinationList.toArray(destinations);
-		
-		
 		GeoApiContext context = new GeoApiContext.Builder().apiKey(getGoogleMAPKey()).build();
 		List<Double> arrlist = new ArrayList<Double>();
 		DistanceMatrixApiRequest req = DistanceMatrixApi.newRequest(context);
 		DistanceMatrix t = req.origins(origins).destinations(destinations).mode(TravelMode.DRIVING).units(Unit.IMPERIAL)
 				.await();
-		
-		Map< Double, String> unsortMap = new HashMap<>();
-
+		Map<Double, String> unsortMap = new HashMap<>();
 		for (int i = 0; i < origins.length; i++) {
 			for (int j = 0; j < destinations.length; j++) {
 				try {
-					System.out.println((j+1) + "): " + t.rows[i].elements[j].distance.inMeters + " meters");
+					System.out.println((j + 1) + "): " + t.rows[i].elements[j].distance.inMeters + " meters");
 					arrlist.add((double) t.rows[i].elements[j].distance.inMeters);
-					
 					unsortMap.put((double) t.rows[i].elements[j].distance.inMeters, destinations[j]);
-					
 					System.out.println((double) t.rows[i].elements[j].distance.inMeters);
-					
-					
 				} catch (Exception e) {
-				System.out.println("invalid address");
+					System.out.println("invalid address");
 				}
 			}
 		}
-		
-		
 //		LinkedHashMap<String, Double> sortedMap = new LinkedHashMap<>();
 //		unsortMap.entrySet().stream().sorted(Map.Entry.comparingByValue())
 //                .forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
-//		
-		
-		
-		
-		
 		System.out.println("-");
-		
-		
 		Collections.sort(arrlist);
-		
 		System.out.println(arrlist);
-		List<String> destList = new ArrayList<String>();
-		
-	     arrlist.removeIf(r ->(arrlist.indexOf(r)>4));
-	     
-			
-			Double [] arrArray = new Double[arrlist.size()];
-			
-			arrArray = arrlist.toArray(arrArray);
-			
-			System.out.println(arrArray);
-			
-			
-			for(int c=0; c< arrArray.length; c++) {
-				String destination = unsortMap.get(arrArray[c]);
-				destList.add(destination);
-			}
-			
-			System.out.println(destList);
-		
-		
-	
-		
-		
-		
-		
-		
-		String [] destArray = new String[destList.size()];
-		
+		List<String> destList = new ArrayList<>();
+		arrlist.removeIf(r -> (arrlist.indexOf(r) > 4));
+		Double[] arrArray = new Double[arrlist.size()];
+		arrArray = arrlist.toArray(arrArray);
+		System.out.println(arrArray);
+		for (int c = 0; c < arrArray.length; c++) {
+			String destination = unsortMap.get(arrArray[c]);
+			destList.add(destination);
+		}
+		System.out.println(destList);
+		String[] destArray = new String[destList.size()];
 		destArray = destList.toArray(destArray);
-		
 		List<User> userList = new ArrayList<User>();
-		
-		
-		for(int x=0; x< destArray.length; x++) {
+		for (int x = 0; x < destArray.length; x++) {
 			User a = userDestMap.get(destArray[x]);
 			System.out.println(a);
 			userList.add(a);
 			System.out.println(userList);
 		}
-		
-		
 		return userList;
-
-
-
 	}
 	
 	public String getGoogleMAPKey() {

